@model IEnumerable<EPOv2.ViewModels.UserViewModel>

@{
    ViewBag.Title = "ManageUsers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Manage Users</h2>

<p>
    <button href="#" class="btn btn-info btn-sm" role="button" onclick="window.location.href='@Url.Action("DownloadUsers", "Maintenance")'">Download New Users</button>
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.FullName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Login)
        </th>
        @*<th>
            @Html.DisplayNameFor(model => model.Name)
        </th>*@
        @*<th>
            @Html.DisplayNameFor(model => model.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastName)
        </th>*@

        <th>
            @Html.DisplayNameFor(model => model.Email)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Mobile)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Work)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.EmployeeId)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.isDeleted)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.FullName)
        </td>
        <td >
            @Html.DisplayFor(modelItem => item.Login)
        </td>
        @*<td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.FirstName)Just because you can doesn't mean you should — clipboard.js
        </td>
        <td><input id="foo" value="https://github.com/zenorocha/clipboard.js.git">
            @Html.DisplayFor(modelItem => item.LastName)
        </td>*@

        <td>
            @Html.DisplayFor(modelItem => item.Email)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Mobile)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Work)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.EmployeeId)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.isDeleted)
        </td>
        <td>
            <a href="@Url.Action("EditUser", "UserManagement", new { id = item.Id })" class="btn btn-success control-btn-crud">
                <span class="glyphicon glyphicon-edit"></span>
            </a>
            <a href="@Url.Action("EditUserOrderSettings", "UserManagement", new { id = item.Id })" class="btn btn-info control-btn-crud">
                <span class="glyphicon glyphicon-cog"></span>
            </a>
            <button class="btn btn-default control-btn-crud copyButton" type="button"  data-clipboard-action="copy" data-clipboard-text="@item.Id">
                <span class="fa fa-clipboard" aria-hidden="true"></span>
            </button>
                @*<a href="@Url.Action("DeleteUser", "Maintenance", new { id = item.Id })" class="btn btn-danger control-btn-crud">
                    <span class="glyphicon glyphicon-trash"></span>
                </a>
                <a href="@Url.Action("ActivateUser", "Maintenance", new { id = item.Id })" class="btn btn-info control-btn-crud">
                    <span class="glyphicon glyphicon-repeat"></span>
                </a>*@
            
        </td>
    </tr>
}

</table>
@section Scripts{
<script src="~/Scripts/clipboard.min.js"></script>
    <script type="text/javascript">
        var clipboard = new Clipboard('.copyButton');
        clipboard.on('success', function (e) {
            console.log(e);
        });
        clipboard.on('error', function (e) {
            console.log(e);
        });
        //function copyToClipboard(id) {
        //    console.log(id);
        //    var target = $("#" + id);
        //    console.log(target);
        //    target.focus();
        //    //target.textContent = id;
        //    console.log(target.val());
        //    //select(target);
        //    //    target.focus();
        //    target.select();
        //    r = target.createTextRange();
        //    document.execCommand("copy");
        //}


    </script>
}